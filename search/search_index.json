{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Template de Entrega","text":"Edi\u00e7\u00e3o <p>2025.1</p>"},{"location":"#grupokit-x","title":"Grupo/Kit X","text":"<ol> <li>Alexandre Martinelli</li> <li>Andr\u00e9 Henrique Pacheco Alves</li> <li>Gabriel Cardoso Campos Rodrigues</li> <li>Hugo Coscelli Ferraz</li> <li>Julia Akemi Mullis</li> <li>Theo Camuri Gaspar</li> <li>Grupo Masked Penguins<ul> <li>Jo\u00e3o da Silva</li> <li>Pedro de Souza</li> </ul> </li> </ol> <p>Instru\u00e7\u00f5es</p> <p>Voc\u00eas devem utilizar este template como um bloco de notas para registrar o que foi feito e o que falta fazer. Voc\u00eas devem adicionar as informa\u00e7\u00f5es necess\u00e1rias. O template deve ser editado e atualizado a cada entrega, registrando assim a data de entrega e o que foi feito at\u00e9 o momento via Git.</p>"},{"location":"#entregas","title":"Entregas","text":"<ul> <li> Roteiro 1 - Data 23/02/2025</li> <li> Roteiro 2</li> <li> Roteiro 3</li> <li> Roteiro 4</li> <li> Projeto</li> </ul>"},{"location":"#diagramas","title":"Diagramas","text":"<p>Use o Mermaid para criar os diagramas de documenta\u00e7\u00e3o.</p> <p>Mermaid Live Editor</p> <pre><code>flowchart TD\n    Deployment:::orange --&gt;|defines| ReplicaSet\n    ReplicaSet --&gt;|manages| pod((Pod))\n    pod:::red --&gt;|runs| Container\n    Deployment --&gt;|scales| pod\n    Deployment --&gt;|updates| pod\n\n    Service:::orange --&gt;|exposes| pod\n\n    subgraph  \n        ConfigMap:::orange\n        Secret:::orange\n    end\n\n    ConfigMap --&gt; Deployment\n    Secret --&gt; Deployment\n    classDef red fill:#f55\n    classDef orange fill:#ffa500</code></pre>"},{"location":"#codigos","title":"C\u00f3digos","text":"De um arquivo remotoAnota\u00e7\u00f5es no c\u00f3digo main.yaml<pre><code>name: ci\non:\n  - push\n  - pull_request\n\n# Environment\nenv:\n  CI: true\n  PYTHON_VERSION: 3.12\n\n# Jobs to run\njobs:\n\n  # Build and deploy documentation site\n  deploy:\n    if: github.event_name != 'pull_request' &amp;&amp; github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    steps:\n\n      # Checkout source form GitHub\n      - uses: actions/checkout@v4\n\n      # Install Python runtime and dependencies\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n\n      # pip\n      - run: |\n          pip install -r requirements.txt\n\n      # deploy\n      - run: |\n          mkdocs gh-deploy --force\n</code></pre> compose.yaml<pre><code>name: app\n\n    db:\n        image: postgres:17\n        environment:\n            POSTGRES_DB: ${POSTGRES_DB:-projeto} # (1)!\n            POSTGRES_USER: ${POSTGRES_USER:-projeto}\n            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-projeto}\n        ports:\n            - 5432:5432 #(2)!\n</code></pre> <ol> <li> <p>Caso a vari\u00e1vel de ambiente <code>POSTGRES_DB</code> n\u00e3o exista ou seja nula - n\u00e3o seja definida no arquivo <code>.env</code> - o valor padr\u00e3o ser\u00e1 <code>projeto</code>. Vide documenta\u00e7\u00e3o.</p> </li> <li> <p>Aqui \u00e9 feito um t\u00fanel da porta 5432 do container do banco de dados para a porta 5432 do host (no caso localhost). Em um ambiente de produ\u00e7\u00e3o, essa porta n\u00e3o deve ser exposta, pois ningu\u00e9m de fora do compose deveria acessar o banco de dados diretamente.</p> </li> </ol>"},{"location":"#exemplo-de-video","title":"Exemplo de v\u00eddeo","text":"<p>Lorem ipsum dolor sit amet</p>"},{"location":"#referencias","title":"Refer\u00eancias","text":"<p>Material for MkDocs</p> <p>hsandmann</p>"},{"location":"arvore/main/","title":"Template de Entrega","text":"Edi\u00e7\u00e3o <p>2025.1</p>"},{"location":"arvore/main/#entrega-individual","title":"Entrega Individual","text":"<ol> <li>Alexandre Martinelli</li> </ol>"},{"location":"arvore/main/#introducao","title":"Introdu\u00e7\u00e3o","text":"<ol> <li>Explora\u00e7\u00e3o de dados: Ao selecionar uma base no kaggle referentes a cinco tipos de rem\u00e9dio, rem\u00e9dio A, B, C, X e Y, tem como objetivo prever qual rem\u00e9dio o paciente teria uma resposta melhor. As colunas presentes nesse dataset s\u00e3o Idade, Sexo, Press\u00e3o Arterial, nivel de colesterol, nivel de s\u00f3dio para pot\u00e1ssio no sangue e rem\u00e9dio que seria nossa target. </li> </ol>"},{"location":"arvore/main/#colunas","title":"Colunas","text":"<ol> <li>Age (Idade): Essa coluna temos a idade dos pacientes, com a idade minima presente de 15, idade m\u00e9dia de 44,3 e maxima de 74 sendo do tipo Integer. </li> <li>Sex (Sexo): Essa coluna tem o sexo de cada paciente, divididos em 52% Masculino e 48% feminino, dados do tipo String.</li> <li>Blood Pressure (Press\u00e3o Arterial): Essa coluna tem os niveis de press\u00e3o arterial de cada paciente sendo dividida em 39% HIGH, 29% NORMAL e 32% LOW, dados do tipo String.</li> <li>Cholesterol (nivel de colesterol): Essa coluna tem os niveis de colesterol de cada paciente sendo divididos em 52% HIGH e 49% NORMAl, dados do tipo String.</li> <li>Na_to_K (s\u00f3dio para pot\u00e1ssio): Essa coluna tem os a raz\u00e3o de s\u00f3dio para pot\u00e1ssio no sangue de um paciente, com a minima de 6,27, media de 16,1 e maxima de 38,2, dados do tipo Float/Decimal.</li> <li>Drug (rem\u00e9dio): Essa coluna tem os rem\u00e9dio de melhor resposta para o paciente, dados do tipo String.</li> </ol> Age Sex BP Cholesterol Na_to_K Drug 36 M LOW NORMAL 11.424 drugX 16 F HIGH NORMAL 15.516 drugY 18 F NORMAL NORMAL 8.75 drugX 59 F LOW HIGH 10.444 drugC 47 M LOW NORMAL 33.542 drugY 51 M HIGH HIGH 18.295 drugY 18 F HIGH NORMAL 24.276 drugY 28 F NORMAL HIGH 12.879 drugX 42 M HIGH NORMAL 12.766 drugA 66 F NORMAL NORMAL 8.107 drugX"},{"location":"arvore/main/#pre-processamento","title":"Pr\u00e9-processamento","text":"<p>Primeiro foi feita uma verifica\u00e7\u00e3o em todas as colunas procurando valores faltantes e substituindo eles pela mediana em valores num\u00e9ricos ou pela moda em vari\u00e1veis categ\u00f3ricas. Como vimos na descri\u00e7\u00e3o das colunas temos tr\u00eas que possuem dados categ\u00f3ricos do tipo String, sendo elas Sex(Sexo), Blood Pressure(Press\u00e3o Arterial) e Cholesterol(nivel de colesterol), para conseguirmos utilizar essas informa\u00e7\u00f5es \u00e9 necessario convertelas em numeros, oque foi feito utilizando a biblioteca scikit-learn que possui a fun\u00e7\u00e3o LabelEncoder(), em seguida aplicamos dois tipos de escalonamento \u00e0s colunas num\u00e9ricas Age e Na_to_K: padroniza\u00e7\u00e3o (z-score) e normaliza\u00e7\u00e3o min-max.</p> ResultPrep CodeStandardizationStandardization code N-Age Sex BP Cholesterol N-Na_to_K Drug 0.4 1 1 1 0.130411 drugX 0 0 0 1 0.291292 drugY 0.04 0 2 1 0.0252801 drugX 0.86 0 1 0 0.0918813 drugC 0.62 1 1 1 1 drugY 0.7 1 0 0 0.40055 drugY 0.04 0 0 1 0.635699 drugY 0.24 0 2 0 0.187615 drugX 0.52 1 0 1 0.183173 drugA 1 0 2 1 0 drugX <pre><code>import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\n\n# Preprocess the data\ndef preprocess(df):\n    # Fill missing values\n    df['Age'].fillna(df['Age'].median(), inplace=True)\n    df['Sex'].fillna(df['Sex'].mode()[0], inplace=True)\n    df['BP'].fillna(df['BP'].mode()[0], inplace=True)\n    df['Cholesterol'].fillna(df['Cholesterol'].mode()[0], inplace=True)\n    df['Na_to_K'].fillna(df['Na_to_K'].median(), inplace=True)\n    df['Drug'].fillna(df['Drug'].mode()[0], inplace=True)\n\n   # Convert categorical variables\n    label_encoder = LabelEncoder()\n    df['Sex'] = label_encoder.fit_transform(df['Sex'])\n    df['BP'] = label_encoder.fit_transform(df['BP'])\n    df['Cholesterol'] = label_encoder.fit_transform(df['Cholesterol'])\n\n    # Select features\n    features = ['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K', 'Drug']\n    return df[features]\n\n# Load the dataset\ndf = pd.read_csv('https://raw.githubusercontent.com/alexandremartinelli11/machine-learning/refs/heads/main/data/kaggle/drug200.csv')\ndf = df.sample(n=10, random_state=42)\n\n# Preprocessing\ndf = preprocess(df)\n\n# Display the first few rows of the dataset\nprint(df.to_markdown(index=False))\n</code></pre> Age N-Age Z-Age Na_to_K N-Na_to_K Z-Na_to_K 95 36 0.4 -0.117416 11.424 0.130411 -0.526121 15 16 0 -1.23566 15.516 0.291292 -0.0105705 30 18 0.04 -1.12384 8.75 0.0252801 -0.863018 158 59 0.86 1.16857 10.444 0.0918813 -0.649591 128 47 0.62 0.49762 33.542 1 2.26052 115 51 0.7 0.72127 18.295 0.40055 0.339555 69 18 0.04 -1.12384 24.276 0.635699 1.0931 170 28 0.24 -0.564715 12.879 0.187615 -0.342806 174 42 0.52 0.218058 12.766 0.183173 -0.357043 45 66 1 1.55996 8.107 0 -0.944029 <pre><code>import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\n\ndef standardization(df):\n\n    df['Z-Age'] = df['Age'].apply(lambda x: (x-df['Age'].mean())/df['Age'].std())\n    df['N-Age'] = df['Age'].apply(lambda x: (x-df['Age'].min())/(df['Age'].max()-df['Age'].min()))\n    df['Z-Na_to_K'] = df['Na_to_K'].apply(lambda x: (x-df['Na_to_K'].mean())/df['Na_to_K'].std())\n    df['N-Na_to_K'] = df['Na_to_K'].apply(lambda x: (x-df['Na_to_K'].min())/(df['Na_to_K'].max()-df['Na_to_K'].min()))\n    df = df[['Age', 'N-Age', 'Z-Age', 'Na_to_K', 'N-Na_to_K', 'Z-Na_to_K']].dropna()\n    print(df.head(10).to_markdown())\n\ndef preprocess(df):\n    # Fill missing values\n    df['Age'].fillna(df['Age'].median(), inplace=True)\n    df['Sex'].fillna(df['Sex'].mode()[0], inplace=True)\n    df['BP'].fillna(df['BP'].mode()[0], inplace=True)\n    df['Cholesterol'].fillna(df['Cholesterol'].mode()[0], inplace=True)\n    df['Na_to_K'].fillna(df['Na_to_K'].median(), inplace=True)\n    df['Drug'].fillna(df['Drug'].mode()[0], inplace=True)\n\n   # Convert categorical variables\n    label_encoder = LabelEncoder()\n    df['Sex'] = label_encoder.fit_transform(df['Sex'])\n    df['BP'] = label_encoder.fit_transform(df['BP'])\n    df['Cholesterol'] = label_encoder.fit_transform(df['Cholesterol'])\n\n    # Select features\n    features = ['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K', 'Drug']\n    return df[features]\n\n# Load the dataset\ndf = pd.read_csv('https://raw.githubusercontent.com/alexandremartinelli11/machine-learning/refs/heads/main/data/kaggle/drug200.csv')\ndf = df.sample(n=10, random_state=42)\n\n# Preprocessing\ndf = preprocess(df)\n\nstandardization(df)\n</code></pre> <p>Use o Mermaid para criar os diagramas de documenta\u00e7\u00e3o.</p> <p>Mermaid Live Editor</p> <pre><code>flowchart TD\n    Deployment:::orange --&gt;|defines| ReplicaSet\n    ReplicaSet --&gt;|manages| pod((Pod))\n    pod:::red --&gt;|runs| Container\n    Deployment --&gt;|scales| pod\n    Deployment --&gt;|updates| pod\n\n    Service:::orange --&gt;|exposes| pod\n\n    subgraph  \n        ConfigMap:::orange\n        Secret:::orange\n    end\n\n    ConfigMap --&gt; Deployment\n    Secret --&gt; Deployment\n    classDef red fill:#f55\n    classDef orange fill:#ffa500</code></pre>"},{"location":"arvore/main/#codigos","title":"C\u00f3digos","text":"De um arquivo remotoAnota\u00e7\u00f5es no c\u00f3digo main.yaml<pre><code>name: ci\non:\n  - push\n  - pull_request\n\n# Environment\nenv:\n  CI: true\n  PYTHON_VERSION: 3.12\n\n# Jobs to run\njobs:\n\n  # Build and deploy documentation site\n  deploy:\n    if: github.event_name != 'pull_request' &amp;&amp; github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    steps:\n\n      # Checkout source form GitHub\n      - uses: actions/checkout@v4\n\n      # Install Python runtime and dependencies\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n\n      # pip\n      - run: |\n          pip install -r requirements.txt\n\n      # deploy\n      - run: |\n          mkdocs gh-deploy --force\n</code></pre> compose.yaml<pre><code>name: app\n\n    db:\n        image: postgres:17\n        environment:\n            POSTGRES_DB: ${POSTGRES_DB:-projeto} # (1)!\n            POSTGRES_USER: ${POSTGRES_USER:-projeto}\n            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-projeto}\n        ports:\n            - 5432:5432 #(2)!\n</code></pre> <ol> <li> <p>Caso a vari\u00e1vel de ambiente <code>POSTGRES_DB</code> n\u00e3o exista ou seja nula - n\u00e3o seja definida no arquivo <code>.env</code> - o valor padr\u00e3o ser\u00e1 <code>projeto</code>. Vide documenta\u00e7\u00e3o.</p> </li> <li> <p>Aqui \u00e9 feito um t\u00fanel da porta 5432 do container do banco de dados para a porta 5432 do host (no caso localhost). Em um ambiente de produ\u00e7\u00e3o, essa porta n\u00e3o deve ser exposta, pois ningu\u00e9m de fora do compose deveria acessar o banco de dados diretamente.</p> </li> </ol>"},{"location":"arvore/main/#exemplo-de-video","title":"Exemplo de v\u00eddeo","text":"<p>Lorem ipsum dolor sit amet</p>"},{"location":"arvore/main/#referencias","title":"Refer\u00eancias","text":"<p>Material for MkDocs</p>"},{"location":"projeto/main/","title":"Projeto","text":"<p>Aqui vai toda a documenta\u00e7\u00e3o do projeto, incluindo o que j\u00e1 foi feito e o que falta fazer.</p>"},{"location":"roteiro1/main/","title":"Roteiro 1","text":""},{"location":"roteiro1/main/#objetivo","title":"Objetivo","text":"<p>Aqui vai o objetivo macro do roteiro. Por que estamos fazendo o que estamos fazendo?</p>"},{"location":"roteiro1/main/#montagem-do-roteiro","title":"Montagem do Roteiro","text":"<p>Os pontos \"tarefas\" s\u00e3o os passos que devem ser seguidos para a realiza\u00e7\u00e3o do roteiro. Eles devem ser claros e objetivos. Com evid\u00eancias claras de que foram realizados.</p>"},{"location":"roteiro1/main/#tarefa-1","title":"Tarefa 1","text":"<p>Instalando o MAAS:</p> sudo snap install maas --channel=3.5/Stable <p></p> <p>Dashboard do MAAS</p> <p>Conforme ilustrado acima, a tela inicial do MAAS apresenta um dashboard com informa\u00e7\u00f5es sobre o estado atual dos servidores gerenciados. O dashboard \u00e9 composto por diversos pain\u00e9is, cada um exibindo informa\u00e7\u00f5es sobre um aspecto espec\u00edfico do ambiente gerenciado. Os pain\u00e9is podem ser configurados e personalizados de acordo com as necessidades do usu\u00e1rio.</p>"},{"location":"roteiro1/main/#tarefa-2","title":"Tarefa 2","text":""},{"location":"roteiro1/main/#app","title":"App","text":""},{"location":"roteiro1/main/#tarefa-1_1","title":"Tarefa 1","text":""},{"location":"roteiro1/main/#tarefa-2_1","title":"Tarefa 2","text":"<p>Exemplo de diagrama</p> <pre><code>architecture-beta\n    group api(cloud)[API]\n\n    service db(database)[Database] in api\n    service disk1(disk)[Storage] in api\n    service disk2(disk)[Storage] in api\n    service server(server)[Server] in api\n\n    db:L -- R:server\n    disk1:T -- B:server\n    disk2:T -- B:db</code></pre> <p>Mermaid</p>"},{"location":"roteiro1/main/#questionario-projeto-ou-plano","title":"Question\u00e1rio, Projeto ou Plano","text":"<p>Esse se\u00e7\u00e3o deve ser preenchida apenas se houver demanda do roteiro.</p>"},{"location":"roteiro1/main/#discussoes","title":"Discuss\u00f5es","text":"<p>Quais as dificuldades encontradas? O que foi mais f\u00e1cil? O que foi mais dif\u00edcil?</p>"},{"location":"roteiro1/main/#conclusao","title":"Conclus\u00e3o","text":"<p>O que foi poss\u00edvel concluir com a realiza\u00e7\u00e3o do roteiro?</p>"},{"location":"roteiro2/main/","title":"Roteiro 2","text":""},{"location":"roteiro2/main/#diagrama-de-classes-do-banco","title":"Diagrama de Classes do Banco","text":"<pre><code>classDiagram\n    class Conta {\n        - String id\n        # double saldo\n        - Cliente cliente\n        + sacar(double valor)\n        + depositar(double valor)\n    }\n    class Cliente {\n        - String id\n        - String nome\n        - List&lt;Conta&gt; contas\n    }\n    class PessoaFisica {\n        - String cpf\n    }\n    class PessoaJuridica {\n        - String cnpj\n    }\n    class ContaCorrente {\n        - double limite\n        + sacar(double valor)\n    }\n    class ContaPoupanca {\n        + sacar(double valor)\n    }\n    Conta *-- Cliente\n    Conta &lt;|-- ContaCorrente\n    Conta &lt;|-- ContaPoupanca\n    Cliente &lt;|-- PessoaFisica\n    Cliente &lt;|-- PessoaJuridica</code></pre>"},{"location":"roteiro2/main/#diagrama-de-sequencia-de-autorizacao","title":"Diagrama de Seq\u00fc\u00eancia de Autoriza\u00e7\u00e3o","text":"<pre><code>sequenceDiagram\n  autonumber\n  actor User\n  User-&gt;&gt;Auth Service: request with token\n  Auth Service-&gt;&gt;Auth Service: decodes the token and extracts claims\n  Auth Service-&gt;&gt;Auth Service: verifies permissions\n  critical allowed\n    Auth Service-&gt;&gt;Secured Resource: authorizes the request\n    Secured Resource-&gt;&gt;User: returns the response\n  option denied\n    Auth Service--&gt;&gt;User: unauthorized message\n  end  </code></pre>"},{"location":"roteiro3/main/","title":"Roteiro 3","text":"<p>Running the code below in Browser (Woooooowwwwww!!!!!!). <sup>1</sup></p> <p> Editor (session: default) Run <pre>import ssl\nimport pandas as pd\n\ndf = pd.DataFrame()\ndf['AAPL'] = pd.Series([1, 2, 3])\ndf['MSFT'] = pd.Series([4, 5, 6])\ndf['GOOGL'] = pd.Series([7, 8, 9])\n\nprint(df)\n</pre> Output Clear <pre></pre> </p> <ol> <li> <p>Pyodide \u21a9</p> </li> </ol>"},{"location":"roteiro4/main/","title":"Roteiro 4","text":"<p>Se chegou aqui, \u00e9 porque voc\u00ea est\u00e1 interessado em saber mais. Logo, de brinde, como rodar um c\u00f3digo <code>Python</code> aqui.</p> 2025-08-25T00:03:51.069861 image/svg+xml Matplotlib v3.10.5, https://matplotlib.org/ 2025-08-25T00:03:51.882699 image/svg+xml Matplotlib v3.10.5, https://matplotlib.org/ <p>Markdown-exec \u00e9 uma extens\u00e3o do Markdown que permite executar c\u00f3digo Python diretamente no Markdown. Isso \u00e9 \u00fatil para gerar resultados din\u00e2micos ou executar scripts de forma interativa.</p>"}]}